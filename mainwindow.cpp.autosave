#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QMessageBox>


#include "tableprinter.h"
#include <QPrinter>
#include <QPrintPreviewDialog>
#include <QPainter>
#include <QDebug>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlTableModel>



MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

}

MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::on_AfficherF_clicked()
{
    ;
    ui->tabF->setModel(tmpanimaux.afficher());
}

void MainWindow::on_SupprimerF_clicked()
{
    int idp = ui->idS->text().toInt();
    bool test=tmpanimaux.supprimer(idp);
    if(test)
    {ui->tabF->setModel(tmpanimaux.afficher());
        QMessageBox::information(nullptr,QObject::tr("Supprimer un animaux"),QObject::tr("animaux supprimer.\n"
                                                                                        "Click Cancel to exit."), QMessageBox::Cancel);}
    ui->idS->clear();
}

void MainWindow::on_ModifierF_clicked()
{




    int id = ui->idp->text().toInt();
     QString nom= ui->nom->text();
          int prix= ui->prix->text().toInt();
          int masse= ui->masse->text().toInt();
         animaux f;
         bool test=f.modifier(id,nom,prix,masse);
       if(test)
         {
            ui->tabF->setModel((tmpanimaux.afficher()));//refresh
            QMessageBox::information(nullptr, QObject::tr("Modifier une animaux !"),
                              QObject::tr(" animaux modifié ! \n"
                                          "Click Cancel to exit."), QMessageBox::Cancel);
         }

         else {

             QMessageBox::critical(nullptr, QObject::tr("Modifier une animaux"),
                         QObject::tr("Erreur !.\n"
                                     "Click Cancel to exit."), QMessageBox::Cancel);
         }
}

void MainWindow::on_valider_clicked()
{
     int id =ui->idp->text().toInt();
    QString nom=ui->nom->text();
    int prix=ui->prix->text().toInt();

    int masse =ui->masse->text().toInt();
    animaux f(id,nom,prix,masse);
    bool test=f.ajouter();
    if(test)
    {ui->tabF->setModel(tmpanimaux.afficher());
    QMessageBox::information(nullptr,QObject::tr("Ajouter un animaux"),QObject::tr("animaux ajouter.\n"
                                                                                    "Click Cancel to exit."), QMessageBox::Cancel);}
     ui->idp->clear();
    ui->nom->clear();
    ui->prix->clear();

    ui->masse->clear();
}


void MainWindow::on_AfficherC_clicked()
{
    ui->tabC->setModel(tmpnourriture.afficher());
}


void MainWindow::on_SupprimerC_clicked()
{
    int idp = ui->idSC->text().toInt();
    bool test=tmpnourriture.supprimer(idp);
    if(test)
    {ui->tabC->setModel(tmpnourriture.afficher());
        QMessageBox::information(nullptr,QObject::tr("Supprimer un nourriture"),QObject::tr("nourriture supprimer.\n"
                                                                                        "Click Cancel to exit."), QMessageBox::Cancel);}
    ui->idSC->clear();
}







void MainWindow::on_validerC_clicked()
{   int id =ui->idpC->text().toInt();
    QString nom=ui->nomC->text();



    int quantite =ui->quantiteC->text().toInt();

    nourriture c(id,nom,quantite);
    bool test=c.ajouter();
    if(test)
    {ui->tabC->setModel(tmpnourriture.afficher());
    QMessageBox::information(nullptr,QObject::tr("Ajouter un nourriture"),QObject::tr("nourriture ajouter.\n"
                                                                                    "Click Cancel to exit."), QMessageBox::Cancel);}
    ui->idpC->clear();
    ui->nomC->clear();



    ui->quantiteC->clear();

}








void MainWindow::on_ModifierC_clicked()
{
    int id = ui->idpC->text().toInt();
     QString nom= ui->nomC->text();


          int quantite= ui->quantiteC->text().toInt();
         nourriture f;
         bool test=f.modifier(id,nom,quantite);
       if(test)
         {
            ui->tabC->setModel((tmpnourriture.afficher()));//refresh
            QMessageBox::information(nullptr, QObject::tr("Modifier une nourriture !"),
                              QObject::tr(" nourriture modifié ! \n"
                                          "Click Cancel to exit."), QMessageBox::Cancel);
         }

         else {

             QMessageBox::critical(nullptr, QObject::tr("Modifier une nourriture"),
                         QObject::tr("Erreur !.\n"
                                     "Click Cancel to exit."), QMessageBox::Cancel);
         }


}

void MainWindow::on_pushButton_clicked()
{

    bool test=true;
            if(test){

                   { ui->tabF->setModel(tmpanimaux.trier_prix());
                    QMessageBox::information(nullptr, QObject::tr("trier animaux"),
                                QObject::tr("animaux trier.\n"
                                            "Voulez-vous enregistrer les modifications ?"),
                                       QMessageBox::Save
                                       | QMessageBox::Cancel,
                                      QMessageBox::Save);
    }

                }
                else
                    QMessageBox::critical(nullptr, QObject::tr("trier animaux"),
                                QObject::tr("Erreur !.\n"
                                            "Click Cancel to exit."), QMessageBox::Cancel);
}

void MainWindow::on_pushButton_2_clicked()
{
    bool test=true;
            if(test){

                   { ui->tabC->setModel(tmpnourriture.trier_quantite());
                    QMessageBox::information(nullptr, QObject::tr("trier nourriture"),
                                QObject::tr("nourriture trier.\n"
                                            "Voulez-vous enregistrer les modifications ?"),
                                       QMessageBox::Save
                                       | QMessageBox::Cancel,
                                      QMessageBox::Save);
    }

                }
                else
                    QMessageBox::critical(nullptr, QObject::tr("trier plantes"),
                                QObject::tr("Erreur !.\n"
                                            "Click Cancel to exit."), QMessageBox::Cancel);

}

void MainWindow::on_pushButton_3_clicked()
{
    bool test=true;
            if(test){

                   { ui->tabF->setModel(tmpanimaux.trier_masse());
                    QMessageBox::information(nullptr, QObject::tr("trier animaux"),
                                QObject::tr("animaux trier.\n"
                                            "Voulez-vous enregistrer les modifications ?"),
                                       QMessageBox::Save
                                       | QMessageBox::Cancel,
                                      QMessageBox::Save);
    }

                }
                else
                    QMessageBox::critical(nullptr, QObject::tr("trier animaux"),
                                QObject::tr("Erreur !.\n"
                                            "Click Cancel to exit."), QMessageBox::Cancel);
}

void MainWindow::on_pushButton_4_clicked()
{

    {
        int id = ui->idS->text().toInt();
       ui->tabF->setModel(tmpanimaux.rechercher(id));

    }
}

void MainWindow::on_pushButton_5_clicked()
{
    {
        int id = ui->idSC->text().toInt();
       ui->tabC->setModel(tmpnourriture.rechercher(id));

    }
}



// ----------------- example of inharitance from PagePrepare ---------------------

class PrintBorder : public PagePrepare
{
public:
    virtual void preparePage(QPainter *painter);
    static int pageNumber;
};

int PrintBorder::pageNumber = 0;

void PrintBorder::preparePage(QPainter *painter)
{ // print a border on each page
    QRect rec = painter->viewport();
    painter->setPen(QPen(QColor(0, 0, 0), 1));
    painter->drawRect(rec);
    painter->translate(10, painter->viewport().height() - 10);
    painter->drawText(0, 0, QString("Page %1").arg(pageNumber));
    pageNumber += 1;
}

// --------------------------------------------------------------------------------




void MainWindow::print(QPrinter *printer)  {

    // ------------------ simplest example --------------------------

    QPainter painter;
    if(!painter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    // print table
    TablePrinter tablePrinter(&painter, printer);
    QVector<int> columnStretch = QVector<int>() << 2 << 5  << 15;
    if(!tablePrinter.printTable(ui->tabC->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    painter.end();
}


void MainWindow::print_two_tables(QPrinter *printer) {

    // ------------------ two tables example --------------------------

    QPainter painter;
    if(!painter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    // print table
    TablePrinter tablePrinter(&painter, printer);
    QVector<int> columnStretch = QVector<int>() << 2 << 2 << 5 << 15;
    if(!tablePrinter.printTable(ui->tabC->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    // print second table
    painter.translate(0, 100);
    if(!tablePrinter.printTable(ui->tabC->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    painter.end();
}

void MainWindow::uglyPrint(QPrinter *printer) {

    // ---------------- death-to-designers example ------------------

    QPainter uglyPainter;
    if(!uglyPainter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    TablePrinter uglyTablePrinter(&uglyPainter, printer);
    QVector<int> colStretch = QVector<int>() << 5 << 5 << 5 << 10;
    uglyTablePrinter.setPen(QPen(QColor(0, 100, 255), 3, Qt::DotLine)); // pen for borders
    uglyTablePrinter.setHeaderColor(Qt::red);
    uglyTablePrinter.setContentColor(Qt::green);
    QFont font1; // font for headers
    font1.setBold(true);
    QFont font2; // font for content
    font2.setItalic(true);
    uglyTablePrinter.setHeadersFont(font1);
    uglyTablePrinter.setContentFont(font2);
    PrintBorder *printB = new PrintBorder;
    printB->pageNumber = 1;
    uglyTablePrinter.setPagePrepare(printB);
    QVector<QString> headers = QVector<QString>() << "ID" << "nom" << "quantite" ;
    uglyPainter.setPen(QPen(Qt::blue));
    uglyPainter.drawText(uglyPainter.viewport().width()/2 - 40, 40, "TABLE nourriture");
    uglyPainter.translate(0, 60); // start print point
    uglyTablePrinter.setCellMargin(10, 5, 5);
    uglyTablePrinter.setPageMargin(100, 40, 40);
    if(!uglyTablePrinter.printTable(ui->tabC->model(), colStretch, headers)) {
        qDebug() << uglyTablePrinter.lastError();
    }
    uglyPainter.end();
    delete printB;
}







void MainWindow::on_pa_clicked()
{
    QPrintPreviewDialog dialog;
    connect(&dialog, SIGNAL(paintRequested(QPrinter*)), this, SLOT(uglyPrint(QPrinter*)));
    dialog.exec();
}


void MainWindow::print1(QPrinter *printer)  {

    // ------------------ simplest example --------------------------

    QPainter painter;
    if(!painter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    // print table
    TablePrinter tablePrinter(&painter, printer);
    QVector<int> columnStretch = QVector<int>() << 2 << 5  << 15;
    if(!tablePrinter.printTable(ui->tabF->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    painter.end();
}


void MainWindow::print_two_tables1(QPrinter *printer) {

    // ------------------ two tables example --------------------------

    QPainter painter;
    if(!painter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    // print table
    TablePrinter tablePrinter(&painter, printer);
    QVector<int> columnStretch = QVector<int>() << 2 << 2 << 5 << 15;
    if(!tablePrinter.printTable(ui->tabF->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    // print second table
    painter.translate(0, 100);
    if(!tablePrinter.printTable(ui->tabF->model(), columnStretch)) {
        qDebug() << tablePrinter.lastError();
    }
    painter.end();
}

void MainWindow::uglyPrint1(QPrinter *printer) {

    // ---------------- death-to-designers example ------------------

    QPainter uglyPainter;
    if(!uglyPainter.begin(printer)) {
        qWarning() << "can't start printer";
        return;
    }
    TablePrinter uglyTablePrinter(&uglyPainter, printer);
    QVector<int> colStretch = QVector<int>() << 5 << 5 << 5 << 10;
    uglyTablePrinter.setPen(QPen(QColor(0, 100, 255), 3, Qt::DotLine)); // pen for borders
    uglyTablePrinter.setHeaderColor(Qt::red);
    uglyTablePrinter.setContentColor(Qt::green);
    QFont font1; // font for headers
    font1.setBold(true);
    QFont font2; // font for content
    font2.setItalic(true);
    uglyTablePrinter.setHeadersFont(font1);
    uglyTablePrinter.setContentFont(font2);
    PrintBorder *printB = new PrintBorder;
    printB->pageNumber = 1;
    uglyTablePrinter.setPagePrepare(printB);
    QVector<QString> headers = QVector<QString>() << "ID" << "nom" << "PRIX"<< "MASSE" ;
    uglyPainter.setPen(QPen(Qt::blue));
    uglyPainter.drawText(uglyPainter.viewport().width()/2 - 40, 40, "TABLE animaux");
    uglyPainter.translate(0, 60); // start print point
    uglyTablePrinter.setCellMargin(10, 5, 5);
    uglyTablePrinter.setPageMargin(100, 40, 40);
    if(!uglyTablePrinter.printTable(ui->tabF->model(), colStretch, headers)) {
        qDebug() << uglyTablePrinter.lastError();
    }
    uglyPainter.end();
    delete printB;
}



void MainWindow::on_pa1_clicked()
{
    QPrintPreviewDialog dialog;
    connect(&dialog, SIGNAL(paintRequested(QPrinter*)), this, SLOT(uglyPrint1(QPrinter*)));
    dialog.exec();
}




